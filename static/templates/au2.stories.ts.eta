/* Do not edit this file. This file is generated with @creadigme/aurelia-stories - <%= new Date().toLocaleString() %> */
/* eslint-disable prettier/prettier */
import Aurelia from 'aurelia';
<% if (it.registry.import && it.registry.path) { %>
import * as <%= it.registry.import %> from '<%= it.registry.path %>';
<% } else { %>
import { <%= it.component.name %> } from '<%= it.importPath %>';
<% } %>

const loaders = [ async () => ({
<% if (it.registry.path) { %>
  $au: await <%= it.registry.import %>.getOrCreateAurelia(),
<% } else { %>
  $au: Aurelia.register(<%= it.component.name %>),
<% } %>
}) ];

let auCache: Aurelia;
function enhance(sbInfo: { loaded: { $au: Aurelia } }, content: string, context: unknown = {}): HTMLDivElement {
  const host = document.createElement('div');
  host.innerHTML = content;
  const localAu = auCache || sbInfo.loaded.$au;
  if (localAu) {
    localAu.enhance({
      host,
      component: context,
    });
  } else {
    // docs tab issue with loaders https://github.com/storybookjs/storybook/issues/12726
    loaders[0]().then(f => {
      auCache = f.$au;
      auCache.enhance({
        host,
        component: context,
      });
    });
  }
  
  return host;
}

// More on default export: https://storybook.js.org/docs/html/writing-stories/introduction#default-export
export default {
  title: '<%= it.component.category ? it.component.category + '/' + it.component.componentTag : it.component.parent.name /* it.component.componentTag */ %>',
  loaders,
  // More on argTypes: https://storybook.js.org/docs/html/api/argtypes
  argTypes: {
<% for (const property of it.component.bindables) { %>
    <%= property.name %>: <%~ JSON.stringify(
      Object.assign(
        {},
        it.helpers.typedocToArgType[
          (typeof property.type === 'string' ?
            property.type :
            (property.type.type === 'intrinsic' ? property.type.name : 'reference')
          ).toLowerCase()
        ], {
          defaultValue: property.defaultValue,
          description: it.helpers.formatComment(property.comment),
          table: {
            category: 'Properties',
          },
        }
      )
    ) %>,
<% } %>
<% for (const method of it.component.publicMethods) { %>
    <%= method.name %>: <%~ JSON.stringify({
      type: 'object',
      control: 'object',
      description: method.signatures?.length ? it.helpers.formatComment(method.signatures[0].comment) : undefined,
      table: {
        category: 'Methods',
      },
    }) %>,
<% } %>
  },
};


// More on component templates: https://storybook.js.org/docs/html/writing-stories/introduction#using-args
const Template = (options, sbInfo: { loaded: { $au: Aurelia } }) => {
  return enhance(sbInfo, `<<%= it.component.componentTag %>
<% for (const property of it.component.bindables) { %>
  <%= property.name %>.bind="<%= property.name %>"
<% } %>
  ></<%= it.component.componentTag %>>`, options);
};

export const DefaultUsage = Template.bind({});
DefaultUsage.args = {};
DefaultUsage.storyName = 'Default usage';
<% if (it.component.comment) { %>
DefaultUsage.parameters = {
  docs: {
    description: {
      component: <%~ JSON.stringify(it.helpers.formatComment(it.component.comment)) %>,
    },
  },
};
<% } %>

<% if (it.stories.length) { %>
const RawTemplate = (options, sbInfo) => {
  return enhance(sbInfo, options.content);
};
<% } %>

<% for (let i = 0; i < it.stories.length; i++) {
  const storyName = `story${i}`;
  const story = it.stories[i];
%>
export const <%= storyName %> = RawTemplate.bind({});
<%= storyName %>.args = {
  content: <%~ JSON.stringify(story.code) %>,
};
<%= storyName %>.storyName = <%~ JSON.stringify(story.title) %>;
<%= storyName %>.parameters = {
  docs: {
    description: {
      story: <%~ JSON.stringify(story.tags?.length ? story.tags.map(f => `\`${f}\``).join(' ') + '\n' : '') %> + <%~ JSON.stringify(story.help) %>,
    },
  },
};

<% } %>